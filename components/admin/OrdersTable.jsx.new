'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'

// Sample order statuses with their colors
const statusColors = {
  completed: 'bg-green-900/30 text-green-400',
  processing: 'bg-blue-900/30 text-blue-400',
  shipped: 'bg-yellow-900/30 text-yellow-400',
  pending: 'bg-red-900/30 text-red-400',
  cancelled: 'bg-gray-900/30 text-gray-400',
}

// Status mapping for Chinese to English
const statusMapping = {
  已完成: 'completed',
  处理中: 'processing',
  已发货: 'shipped',
  待付款: 'pending',
  已取消: 'cancelled',
}

export default function OrdersTable({ data = [], loading = false, pageSize = 8 }) {
  const [orders, setOrders] = useState([])
  const [sortField, setSortField] = useState('id')
  const [sortDirection, setSortDirection] = useState('desc')
  const [currentPage, setCurrentPage] = useState(1)
  const [filter, setFilter] = useState('')
  const [statusFilter, setStatusFilter] = useState('all')

  // Initialize with default or passed data
  useEffect(() => {
    if (data.length > 0) {
      setOrders(data)
    } else {
      // Default sample data if none provided
      setOrders([
        { id: '20231', customer: '张三', amount: 'MRU 1,200', status: '已完成', date: '2023-05-15' },
        { id: '20232', customer: '李四', amount: 'MRU 890', status: '处理中', date: '2023-05-14' },
        { id: '20233', customer: '王五', amount: 'MRU 2,400', status: '已发货', date: '2023-05-14' },
        { id: '20234', customer: '赵六', amount: 'MRU 360', status: '待付款', date: '2023-05-13' },
        {
          id: '20235',
          customer: 'John Doe',
          amount: 'MRU 1,540',
          status: '已完成',
          date: '2023-05-12',
        },
        {
          id: '20236',
          customer: 'Jane Smith',
          amount: 'MRU 720',
          status: '已取消',
          date: '2023-05-11',
        },
        {
          id: '20237',
          customer: 'Tom Brown',
          amount: 'MRU 3,200',
          status: '已完成',
          date: '2023-05-10',
        },
        {
          id: '20238',
          customer: 'Alice Green',
          amount: 'MRU 450',
          status: '待付款',
          date: '2023-05-09',
        },
        {
          id: '20239',
          customer: 'David Chen',
          amount: 'MRU 1,800',
          status: '已发货',
          date: '2023-05-08',
        },
        {
          id: '20240',
          customer: 'Sarah Wang',
          amount: 'MRU 950',
          status: '处理中',
          date: '2023-05-07',
        },
      ])
    }
  }, [data])

  // Handle sorting
  const handleSort = field => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortDirection('asc')
    }
  }

  // Get sort icon
  const getSortIcon = field => {
    if (sortField !== field) return '⇕'
    return sortDirection === 'asc' ? '↑' : '↓'
  }

  // Filter and sort orders
  const filteredOrders = orders
    .filter(order => {
      const matchesText =
        filter === '' ||
        Object.values(order).some(value =>
          value.toString().toLowerCase().includes(filter.toLowerCase())
        )

      const matchesStatus = statusFilter === 'all' || statusMapping[order.status] === statusFilter

      return matchesText && matchesStatus
    })
    .sort((a, b) => {
      let comparison = 0

      if (a[sortField] < b[sortField]) {
        comparison = -1
      } else if (a[sortField] > b[sortField]) {
        comparison = 1
      }

      return sortDirection === 'asc' ? comparison : -comparison
    })

  // Pagination
  const totalPages = Math.ceil(filteredOrders.length / pageSize)
  const paginatedOrders = filteredOrders.slice((currentPage - 1) * pageSize, currentPage * pageSize)

  // Row animation variants
  const rowVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: i => ({
      opacity: 1,
      y: 0,
      transition: {
        delay: i * 0.05,
        duration: 0.3,
        ease: 'easeOut',
      },
    }),
    exit: { opacity: 0, transition: { duration: 0.2 } },
  }

  return (
    <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl border border-gray-700/50 shadow-lg overflow-hidden">
      {/* Table Header with Search and Filters */}
      <div className="p-4 border-b border-gray-700 bg-gray-800/80">
        <div className="flex flex-col lg:flex-row justify-between lg:items-center space-y-3 lg:space-y-0">
          <h2 className="text-lg font-semibold text-gray-100">Orders</h2>

          <div className="flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-2">
            {/* Status Filter */}
            <select
              className="bg-gray-700 text-gray-200 rounded-lg border-gray-600 focus:ring-purple-500 focus:border-purple-500 text-sm p-2"
              value={statusFilter}
              onChange={e => {
                setStatusFilter(e.target.value)
                setCurrentPage(1) // Reset to first page on filter change
              }}
            >
              <option value="all">All Status</option>
              <option value="completed">Completed</option>
              <option value="processing">Processing</option>
              <option value="shipped">Shipped</option>
              <option value="pending">Pending</option>
              <option value="cancelled">Cancelled</option>
            </select>

            {/* Search Box */}
            <div className="relative">
              <input
                type="text"
                placeholder="Search orders..."
                className="bg-gray-700 text-gray-200 rounded-lg border-gray-600 focus:ring-purple-500 focus:border-purple-500 text-sm pl-10 p-2 w-full"
                value={filter}
                onChange={e => {
                  setFilter(e.target.value)
                  setCurrentPage(1) // Reset to first page on search
                }}
              />
              <div className="absolute left-3 top-2.5 text-gray-400">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-700">
          <thead className="bg-gray-900/30">
            <tr>
              <th
                className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-200 transition-colors"
                onClick={() => handleSort('id')}
              >
                Order ID <span className="ml-1">{getSortIcon('id')}</span>
              </th>
              <th
                className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-200 transition-colors"
                onClick={() => handleSort('customer')}
              >
                Customer <span className="ml-1">{getSortIcon('customer')}</span>
              </th>
              <th
                className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-200 transition-colors"
                onClick={() => handleSort('date')}
              >
                Date <span className="ml-1">{getSortIcon('date')}</span>
              </th>
              <th
                className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-200 transition-colors"
                onClick={() => handleSort('amount')}
              >
                Amount <span className="ml-1">{getSortIcon('amount')}</span>
              </th>
              <th
                className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-200 transition-colors"
                onClick={() => handleSort('status')}
              >
                Status <span className="ml-1">{getSortIcon('status')}</span>
              </th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-700">
            {loading ? (
              <tr>
                <td colSpan={6} className="px-4 py-8 text-center text-gray-400">
                  <div className="flex justify-center">
                    <div className="w-10 h-10 border-t-4 border-b-4 border-purple-500 rounded-full animate-spin"></div>
                  </div>
                  <div className="mt-2">Loading orders...</div>
                </td>
              </tr>
            ) : paginatedOrders.length === 0 ? (
              <tr>
                <td colSpan={6} className="px-4 py-8 text-center text-gray-400">
                  No orders found matching your criteria
                </td>
              </tr>
            ) : (
              paginatedOrders.map((order, index) => (
                <motion.tr
                  key={order.id}
                  className="hover:bg-gray-700/50 transition-colors"
                  custom={index}
                  initial="hidden"
                  animate="visible"
                  variants={rowVariants}
                >
                  <td className="px-4 py-3 text-sm text-gray-300">#{order.id}</td>
                  <td className="px-4 py-3 text-sm text-gray-300">{order.customer}</td>
                  <td className="px-4 py-3 text-sm text-gray-300">{order.date}</td>
                  <td className="px-4 py-3 text-sm text-gray-300">{order.amount}</td>
                  <td className="px-4 py-3 text-sm">
                    <span
                      className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        statusColors[statusMapping[order.status]]
                      }`}
                    >
                      {order.status}
                    </span>
                  </td>
                  <td className="px-4 py-3 text-sm">
                    <div className="flex space-x-2">
                      <button
                        className="p-1 rounded-md bg-purple-800/30 hover:bg-purple-700/50 text-purple-400 transition-colors"
                        title="View"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-4 w-4"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                          />
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                          />
                        </svg>
                      </button>
                      <button
                        className="p-1 rounded-md bg-blue-800/30 hover:bg-blue-700/50 text-blue-400 transition-colors"
                        title="Edit"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-4 w-4"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                          />
                        </svg>
                      </button>
                      <button
                        className="p-1 rounded-md bg-red-800/30 hover:bg-red-700/50 text-red-400 transition-colors"
                        title="Delete"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-4 w-4"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                          />
                        </svg>
                      </button>
                    </div>
                  </td>
                </motion.tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="p-4 border-t border-gray-700 bg-gray-800/80 flex flex-col sm:flex-row justify-between items-center">
          <div className="text-sm text-gray-400 mb-2 sm:mb-0">
            Showing {Math.min(filteredOrders.length, (currentPage - 1) * pageSize + 1)} to{' '}
            {Math.min(filteredOrders.length, currentPage * pageSize)} of {filteredOrders.length}{' '}
            orders
          </div>

          <div className="flex space-x-1">
            <button
              className={`px-3 py-1 rounded-md text-sm ${
                currentPage === 1
                  ? 'bg-gray-700/50 text-gray-500 cursor-not-allowed'
                  : 'bg-gray-700 text-gray-300 hover:bg-gray-600 transition-colors'
              }`}
              onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
              disabled={currentPage === 1}
            >
              Previous
            </button>

            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              // Calculate the page numbers to show based on current page
              let pageNum
              if (totalPages <= 5) {
                pageNum = i + 1
              } else if (currentPage <= 3) {
                pageNum = i + 1
              } else if (currentPage >= totalPages - 2) {
                pageNum = totalPages - 4 + i
              } else {
                pageNum = currentPage - 2 + i
              }

              return (
                <button
                  key={i}
                  className={`px-3 py-1 rounded-md text-sm ${
                    currentPage === pageNum
                      ? 'bg-purple-700 text-white'
                      : 'bg-gray-700 text-gray-300 hover:bg-gray-600 transition-colors'
                  }`}
                  onClick={() => setCurrentPage(pageNum)}
                >
                  {pageNum}
                </button>
              )
            })}

            <button
              className={`px-3 py-1 rounded-md text-sm ${
                currentPage === totalPages
                  ? 'bg-gray-700/50 text-gray-500 cursor-not-allowed'
                  : 'bg-gray-700 text-gray-300 hover:bg-gray-600 transition-colors'
              }`}
              onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
              disabled={currentPage === totalPages}
            >
              Next
            </button>
          </div>
        </div>
      )}
    </div>
  )
}
